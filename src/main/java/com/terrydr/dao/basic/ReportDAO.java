package com.terrydr.dao.basic;

import com.terrydr.domain.MedicalRecord;
import com.terrydr.domain.Report;
import com.terrydr.domain.ReportDetail;
import com.terrydr.domain.ecg.ECGMedicalRecord_UpdateAttrValue;
import com.terrydr.domain.eye.EYEMedicalRecord_UpdateAttrValue;
import com.terrydr.domain.eye.EYEReport_UpdateAttrValue;
import com.terrydr.domain.pathology.PathologyReportDetail;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * @desc 描述 <br>
 * <p>
 * Copyright: Copyright (c)
 * <p>
 * Company: 南京泰立瑞信息科技有限公司
 * <p>
 * @author zyyan@terrydr.com
 * @version 1.0.0
 */
@Repository
public interface ReportDAO {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer reportId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    int insert(Report record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    int insertSelective(Report record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    Report selectByPrimaryKey(Integer reportId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(Report record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_report
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(Report record);

    /**
     * 分页查询
     * @return
     */
    List<ReportDetail> selectPerPageByType(@Param("offset") int offset, @Param("rows") int rows, @Param("type") int[] type);

    /**
     * 全部查询
     * @return
     */
    List<ReportDetail> selectAllByType(@Param("type") int[] type);

    /**
     * 查询总数
     * @return
     */
    int countByType(@Param("type") int[] type);

    /**
     * 分页查询
     * @return
     */
    List<ReportDetail> selectPerPageWithoutType(@Param("offset") int offset, @Param("rows") int rows, @Param("type") int[] type);

    /**
     * 全部查询
     * @return
     */
    List<ReportDetail> selectAllWithoutType(@Param("type") int[] type);

    /**
     * 查询总数
     * @return
     */
    int countWithoutType(@Param("type") int[] type);

    /**
     * 返回HeartRate
     * @return
     */
    List<EYEReport_UpdateAttrValue> selectAttrValue4ClinicalSymptom();

    /**
     * 返回Classification
     * @return
     */
    List<EYEReport_UpdateAttrValue> selectAttrValue4EyeLeftVision();

    /**
     * 返回Classification
     * @return
     */
    List<EYEReport_UpdateAttrValue> selectAttrValue4EyeRightVision();

    /**
     * 返回Classification
     * @return
     */
    List<EYEReport_UpdateAttrValue> selectAttrValue4EyeLeftImg();


    /**
     * 返回Classification
     * @return
     */
    List<EYEReport_UpdateAttrValue> selectAttrValue4EyeRightImg();

    List<PathologyReportDetail> selectPathologyReportDetail();
}